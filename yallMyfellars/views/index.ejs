<!DOCTYPE html>
<html>

<head>
    <title>Canvas with Socket.IO</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.4/socket.io.js">
    </script>
</head>

<body> <canvas id="canvas" width="800" height="600"></canvas>
    <script>
        // start scoket.io connection
        const socket = io();
        const jerm = new Image();
        jerm.src = 'jerma.png';

        const rat = new Image();
        rat.src = 'rat.png';

        players = {}

        let img = "rat.png";

        // get canvas element
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const ctx2 = canvas.getContext('2d');

        // read wasd keys being pressed and released
        document.addEventListener('keydown', handleKeydown);
        document.addEventListener('keyup', handleKeyup);

        // handle key down events
        function handleKeydown(event) {
            const key = event.key;


            // emit the key event to teh server
            socket.emit('keydown', { key });
        }

        // handle key up events
        function handleKeyup(event) {
            const key = event.key;

            // emit the key event to teh server
            socket.emit('keyup', { key });
        }


        socket.on('playerDisconnected', (data) => {
            // Remove the disconnected player from the local player list
            delete players[data.playerId];
        });

        // get socket message for update
        socket.on('update', function (data) {

            ctx.clearRect(0, 0, canvas.width, canvas.height);

            for (var player in data.players) {
                players[player] = data.players[player];
            }


        });

        // on reqestanimationfroame, erease canvs
        requestAnimationFrame(draw);

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            for (var player in players) {
                const { x, y } = players[player];

                // draw a circle at the recieved positon
                ctx.beginPath();
                if (socket.id == players[player].playerId) {
                    ctx.drawImage(jerm, x, y, jerm.width, jerm.height);
                } else {
                    ctx.drawImage(rat, x, y, rat.width/1.25, rat.height/1.25);
                }

            }
            requestAnimationFrame(draw);
        }


    </script>
</body>

</html>

<!--

    <!DOCTYPE html>
<html>
 
<head>
    <title>Canvas with Socket.IO</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.4/socket.io.js">
    </script>
</head>
 
<body> <canvas id="canvas" width="800" height="600"></canvas>
    <script>
        // start scoket.io connection
        const socket = io();
 
        // get canvas element
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
 
        // read wasd keys being pressed and released
        document.addEventListener('keydown', handleKeydown);
        document.addEventListener('keyup', handleKeyup);
 
        // handle key down events
        function handleKeydown(event) {
            const key = event.key;
 
 
            // emit the key event to teh server
            socket.emit('keydown', { key });
        }
 
        // handle key up events
        function handleKeyup(event) {
            const key = event.key;
 
            // emit the key event to teh server
            socket.emit('keyup', { key });
        }
 
        // get socket message for update
        socket.on('update', function (data) {
            for (var player in data.players) {
                const { x, y } = data.players[player];
 
                // draw a circle at the recieved positon
                ctx.beginPath();
                ctx.arc(x, y, 10, 0, 2 * Math.PI);
                console.log(data.players[player].playerId == socket.id);
                if (player.playerId == socket.id) {
                    ctx.fillStyle = 'red';
                } else {
                    ctx.fillStyle = 'blue';
                }
                ctx.fill();
            }
 
 
        });
 
        // on reqestanimationfroame, erease canvs
       
 
    </script>
</body>
 
</html>
-->