<!DOCTYPE html>
<html>

<head>
    <title>Canvas with Socket.IO</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.4/socket.io.js">
    </script>
    <style>
        #points {
            position: absolute;
            top: 40vh;
            right: 0;
            width: 20%;
            padding: 10px;
            background: #0000009d;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            flex-wrap: wrap;
        }
    </style>
</head>

<body style="overflow: hidden; margin: 0;"> <canvas id="canvas" width="" height=""></canvas>
    <div id="points"></div>
    <script>
        let name = prompt("Enter a name");
        // start scoket.io connection
        const socket = io();
        const jerm = new Image();
        jerm.src = 'jermaStare.png';

        const rat = new Image();
        rat.src = 'rat.png';

        const wood = new Image();
        wood.src = 'wood.png';

        const square = new Image();
        square.src = 'squareFade.png';

        const beam = new Image();
        beam.src = 'beam.png';

        const beam2 = new Image();
        beam2.src = 'beam2.png';

        const beamFlip = new Image();
        beamFlip.src = 'beamFlip.png';

        const beam2Flip = new Image();
        beam2Flip.src = 'beam2Flip.png';


        
        var players = {};
        var longest;

        let img = "rat.png";
        let switcher;
        let counter = 0;
        let flip = false;

        // get canvas element
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');

        ctx.canvas.width = window.innerWidth;
        ctx.canvas.height = window.innerHeight;

        sc1 = window.innerWidth / 1920;
        sc2 = window.innerHeight / 1080;


        ctx.canvas.width = 1920 * sc1;
        ctx.canvas.height = 1920 * sc1;
        ctx.scale(sc1, sc2);


        // read wasd keys being pressed and released
        document.addEventListener('keydown', handleKeydown);
        document.addEventListener('keyup', handleKeyup);

        // handle key down events
        function handleKeydown(event) {
            const key = event.key;

            // emit the key event to teh server
            socket.emit('keydown', { key });
        }

        // handle key up events
        function handleKeyup(event) {
            const key = event.key;

            // emit the key event to teh server
            socket.emit('keyup', { key });
        }
        
        
        socket.on('playerDisconnected', (data) => {
            // Remove the disconnected player from the local player list
            delete players[data.playerId];
        });

        // get socket message for update
        socket.on('update', function (data) {

            ctx.clearRect(0, 0, 1920, 1080);
            points()
            for (var player in data.players) {
                players[player] = data.players[player];
            }
            socket.emit('name', { name: name, playerId: player.playerId });
            
            
            function points() {
                for (var player in players) {
                    const points = players[player].points
                    // draw a circle at the received position

                    // ...
                    // Your existing code here

                    // Update the points div with player's points
                    const pointsDiv = document.getElementById('points');
                    pointsDiv.innerText = `Player ${player.name}: ${points}`;

                }
            }

        });

        socket.on('longestConnectedPlayer', function (data) {
            longest = data.playerId;
        });



        let rats = false;

        // on reqestanimationfroame, erease canvs
        requestAnimationFrame(draw);

        function draw() {
            ctx.beginPath();
            ctx.clearRect(0, 0, 1920, 1080);
            ctx.drawImage(square, 0, -200, window.innerWidth * 2, window.innerHeight)
            ctx.drawImage(wood, 0, 980, window.innerWidth * 2, window.innerHeight / 5);
            for (var player in players) {
                const { x, y } = players[player];
                // draw a circle at the recieved positon
                ctx.beginPath();
                if (players[player].playerId != longest) {
                    ctx.rect(x, y - 30, players[player].health * 3, 25);
                    ctx.fillStyle = 'red';
                    ctx.fill();
                    ctx.drawImage(rat, x, y, rat.width / 1.25, rat.height / 1.5);

                }
                if (players[player].playerId == longest) {
                    ctx.drawImage(jerm, x, 0, jerm.width, jerm.height);
                    ctx.rect(x - 40, 0, players[player].health * 3, 25);
                    ctx.fillStyle = 'red';
                    ctx.fill();

                    if (players[player].beam) {
                        counter += 1;
                        if (counter > 50) {
                            counter = 0;
                            switcher = !switcher;
                        }
                        if (players[player].left)
                            flip = false;
                        else if (players[player].right)
                            flip = true;

                        if (switcher) {
                            if (flip) {
                                ctx.drawImage(beamFlip, x + 80, 250, beam.width / 1.25, beam.height / 1.405);
                            } else {
                                ctx.drawImage(beam, x + 80, 250, beam.width / 1.25, beam.height / 1.405);
                            }
                        } else {
                            if (flip) {
                                ctx.drawImage(beam2Flip, x + 80, 250, beam.width / 1.25, beam.height / 1.405);
                            } else {
                                ctx.drawImage(beam2, x + 80, 250, beam.width / 1.25, beam.height / 1.405);
                            }
                        }
                    }
                }

            }
            requestAnimationFrame(draw);
        }


    </script>
</body>

</html>